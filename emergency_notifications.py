"""
Emergency Notification System for Flood Evacuation - India Edition
Sends SOS alerts via SMS (email-to-SMS) and email notifications
"""

import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import logging
from typing import List, Dict, Optional
from twilio.rest import Client

account_sid = 'AC4ec25d9275460e02e5f0cee617ef321b'
auth_token = 'd13337f28d0d6f56529d11bd4e2e81db'
twilio_number = '+16204481914'

# Create Twilio client
client = Client(account_sid, auth_token)



# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)



class EmergencyNotificationSystem:
    def __init__(self):
        """Initialize the notification system with environment variables"""
        self.alert_email = os.getenv("ALERT_EMAIL", "floodevacuationsystem@gmail.com")
        self.alert_password = os.getenv("ALERT_EMAIL_PASSWORD", "kdxo hvhj hmcp glio")
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587
        
        # SMS Gateway mappings for Indian carriers
        self.sms_gateways = {
            # Airtel India
            'airtel': '@airtelmail.com',
            'airtel_ap': '@airtelap.com',
            'airtel_goa': '@airtelmail.com',
            'airtel_gujarat': '@airtelmail.com',
            'airtel_haryana': '@airtelmail.com',
            'airtel_himachal': '@airtelmail.com',
            'airtel_karnataka': '@airtelkk.com',
            'airtel_kerala': '@airtelkerala.com',
            'airtel_kolkata': '@airtelkol.com',
            'airtel_mp': '@airtelmail.com',
            'airtel_maharashtra': '@airtelmail.com',
            
            # Idea Cellular India
            'idea': '@ideacellular.net',
            'idea_ap': '@ideacellular.net',
            'idea_goa': '@ideacellular.net',
            'idea_gujarat': '@ideacellular.net',
            'idea_maharashtra': '@ideacellular.net',
            
            # Vodafone India
            'vodafone': '@vodafonemail.com',
            'vodafone_mumbai': '@vfmail.com',
            
            # Jio (Reliance)
            'jio': '@jiomsg.com',
            'reliance': '@rcom.co.in',
            
            # BSNL
            'bsnl': '@bsnlmail.com',
            
            # Other Indian carriers
            'tata_docomo': '@tatadocomo.com',
            'uninor': '@uninor.in',
            'mts': '@mtnl.net',
            'cellone': '@cellonemail.com',
            'spice': '@spicemobile.com',
            
            # Fallback options
            'default': '@airtelmail.com'  # Most widely used
        }
    
    def detect_indian_carrier(self, phone_number: str) -> str:
        """Detect Indian carrier based on phone number patterns"""
        # Remove all non-digits
        clean_phone = ''.join(filter(str.isdigit, phone_number))
        
        # Remove country code if present
        if len(clean_phone) == 12 and clean_phone.startswith('91'):
            clean_phone = clean_phone[2:]
        elif len(clean_phone) == 13 and clean_phone.startswith('091'):
            clean_phone = clean_phone[3:]
        
        if len(clean_phone) != 10:
            return 'airtel'  # Default fallback
        
        # Basic carrier detection based on number series
        # Note: These are approximate patterns and may not be 100% accurate
        first_digits = clean_phone[:4]
        
        # Airtel patterns (approximate)
        airtel_patterns = ['9876', '9877', '9878', '9879', '8447', '8448', '8449']
        if any(clean_phone.startswith(pattern[:3]) for pattern in airtel_patterns):
            return 'airtel'
        
        # Jio patterns (approximate)
        jio_patterns = ['8901', '8902', '8903', '8904', '8905', '6299', '7299', '7338']
        if any(clean_phone.startswith(pattern[:3]) for pattern in jio_patterns):
            return 'jio'
        
        # Vodafone patterns (approximate)
        vodafone_patterns = ['9825', '9826', '9827', '9828', '9829']
        if any(clean_phone.startswith(pattern[:3]) for pattern in vodafone_patterns):
            return 'vodafone'
        
        # Default to Airtel (most common)
        return 'airtel'
    
    def send_sms_via_email(self, phone_number: str, message: str, carrier: str = None) -> bool:
        """Send SMS via email-to-SMS gateway for Indian carriers"""
        try:
            # Clean phone number
            clean_phone = ''.join(filter(str.isdigit, phone_number))
            
            # Remove country code if present
            if len(clean_phone) == 12 and clean_phone.startswith('91'):
                clean_phone = clean_phone[2:]
            elif len(clean_phone) == 13 and clean_phone.startswith('091'):
                clean_phone = clean_phone[3:]
            
            if len(clean_phone) != 10:
                logger.error(f"Invalid Indian phone number format: {phone_number}")
                return False
            
            # Detect carrier if not provided
            if not carrier:
                carrier = self.detect_indian_carrier(phone_number)
            
            # Get SMS gateway
            gateway = self.sms_gateways.get(carrier.lower(), '@airtelmail.com')
            sms_email = clean_phone + gateway
            
            # Create SMS message (keep it short for SMS)
            sms_message = message[:160]  # SMS limit
            
            msg = MIMEText(sms_message)
            msg['From'] = self.alert_email
            msg['To'] = sms_email
            msg['Subject'] = "FLOOD ALERT"
            
            # Send via SMTP
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.alert_email, self.alert_password)
                server.send_message(msg)
            
            logger.info(f"SMS sent successfully to {phone_number} via {sms_email}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send SMS to {phone_number}: {e}")
            return False
    
    def send_email_alert(self, recipient_email: str, subject: str, message: str, is_html: bool = False) -> bool:
        """Send email alert"""
        try:
            msg = MIMEMultipart('alternative')
            msg['From'] = self.alert_email
            msg['To'] = recipient_email
            msg['Subject'] = subject
            
            if is_html:
                msg.attach(MIMEText(message, 'html'))
            else:
                msg.attach(MIMEText(message, 'plain'))
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.alert_email, self.alert_password)
                server.send_message(msg)
            
            logger.info(f"Email sent successfully to {recipient_email}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send email to {recipient_email}: {e}")
            return False
    
    def send_sos_alert(self, user_data: Dict, evacuation_data: Dict, location_data: Dict) -> Dict:
        """Send comprehensive SOS alert to user and authorities"""
        results = {
            'user_sms': False,
            'user_email': False,
            'authority_email': False,
            'timestamp': datetime.now().isoformat()
        }
        
        # Extract user information
        user_name = user_data.get('name', 'Unknown User')
        user_email = user_data.get('email', '')
        user_phone = user_data.get('phone', '')
        user_lat = location_data.get('lat', 0)
        user_lon = location_data.get('lon', 0)
        
        # Extract evacuation information
        algorithm = evacuation_data.get('best_algorithm', 'Unknown')
        evacuation_time = evacuation_data.get('best_time', 0)
        destination = evacuation_data.get('destination', 'Safe Center')
        
        # Create timestamp
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S IST")
        
        # SMS message for user (Hindi + English for India)
        sms_message = f"""ЁЯЪи рдмрд╛рдврд╝ рдЪреЗрддрд╛рд╡рдиреА FLOOD ALERT ЁЯЪи
{user_name}, рдЖрдк рдмрд╛рдврд╝ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рд╣реИрдВ!
Route: {algorithm}
Time: {evacuation_time:.0f} min
рддреБрд░рдВрдд рдирд┐рдХрд╛рд╕реА рдорд╛рд░реНрдЧ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВ!
Emergency: 112, 100, 108"""
        
        # Email message for user (bilingual)
        user_email_subject = "ЁЯЪи URGENT: рдмрд╛рдврд╝ рдирд┐рдХрд╛рд╕реА рдЖрд╡рд╢реНрдпрдХ - Flood Evacuation Required"
        user_email_message = f"""
<html>
<body style="font-family: Arial, sans-serif; line-height: 1.6;">
    <div style="background-color: #dc3545; color: white; padding: 20px; text-align: center;">
        <h1>ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдмрд╛рдврд╝ рдирд┐рдХрд╛рд╕реА рдЪреЗрддрд╛рд╡рдиреА</h1>
        <h1>ЁЯЪи EMERGENCY FLOOD EVACUATION ALERT</h1>
    </div>
    
    <div style="padding: 20px;">
        <h2>рдкреНрд░рд┐рдп {user_name} / Dear {user_name},</h2>
        
        <p><strong style="color: red;">рдЖрдк рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдмрд╛рдврд╝ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рд╣реИрдВ рдФрд░ рддреБрд░рдВрдд рдирд┐рдХрд╛рд╕реА рдХрд░рдиреА рдЪрд╛рд╣рд┐рдП!</strong></p>
        <p><strong style="color: red;">You are currently in a flood zone and must evacuate immediately!</strong></p>
        
        <h3>ЁЯУН рдЖрдкрдХрд╛ рд╕реНрдерд╛рди / Your Location:</h3>
        <ul>
            <li><strong>рдирд┐рд░реНрджреЗрд╢рд╛рдВрдХ / Coordinates:</strong> {user_lat:.6f}, {user_lon:.6f}</li>
            <li><strong>рдЪреЗрддрд╛рд╡рдиреА рд╕рдордп / Alert Time:</strong> {timestamp}</li>
        </ul>
        
        <h3>ЁЯЪ╢ рдирд┐рдХрд╛рд╕реА рд╡рд┐рд╡рд░рдг / Evacuation Details:</h3>
        <ul>
            <li><strong>рд╕рд░реНрд╡реЛрддреНрддрдо рдорд╛рд░реНрдЧ / Best Route Algorithm:</strong> {algorithm}</li>
            <li><strong>рдЕрдиреБрдорд╛рдирд┐рдд рд╕рдордп / Estimated Time:</strong> {evacuation_time:.0f} minutes</li>
            <li><strong>рдЧрдВрддрд╡реНрдп / Destination:</strong> {destination}</li>
        </ul>
        
        <h3>ЁЯЖШ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдирд┐рд░реНрджреЗрд╢ / Emergency Instructions:</h3>
        <ol>
            <li>рдРрдк рдореЗрдВ рджрд┐рдЦрд╛рдП рдЧрдП рдирд┐рдХрд╛рд╕реА рдорд╛рд░реНрдЧ рдХрд╛ рддреБрд░рдВрдд рдкрд╛рд▓рди рдХрд░реЗрдВ / Follow the evacuation route shown in the app immediately</li>
            <li>рдХреЗрд╡рд▓ рдЖрд╡рд╢реНрдпрдХ рд╡рд╕реНрддреБрдПрдВ рд▓реЗрдВ / Take essential items only (documents, medications, water)</li>
            <li>рд╢рд╛рдВрдд рд░рд╣реЗрдВ рдФрд░ рддреЗрдЬрд╝реА рд╕реЗ рд▓реЗрдХрд┐рди рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рдЖрдЧреЗ рдмрдврд╝реЗрдВ / Stay calm and move quickly but safely</li>
            <li>рд╕рдорд╕реНрдпрд╛ рд╣реЛрдиреЗ рдкрд░ 112 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ / Call 112 if you encounter any problems</li>
            <li>рдЕрдзрд┐рдХрд╛рд░рд┐рдпреЛрдВ рджреНрд╡рд╛рд░рд╛ рд╕реБрд░рдХреНрд╖рд┐рдд рдШреЛрд╖рд┐рдд рдХрд░рдиреЗ рддрдХ рд╡рд╛рдкрд╕ рди рд▓реМрдЯреЗрдВ / Do not return until authorities declare it safe</li>
        </ol>
        
        <h3>ЁЯУЮ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рдВрдкрд░реНрдХ / Emergency Contacts:</h3>
        <ul>
            <li><strong>рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдПрдВ / Emergency Services:</strong> 112</li>
            <li><strong>рдкреБрд▓рд┐рд╕ / Police:</strong> 100</li>
            <li><strong>рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЖрдкрд╛рддрдХрд╛рд▓ / Medical Emergency:</strong> 108</li>
            <li><strong>рдЕрдЧреНрдирд┐рд╢рдорди рд╡рд┐рднрд╛рдЧ / Fire Department:</strong> 101</li>
            <li><strong>рдЖрдкрджрд╛ рдкреНрд░рдмрдВрдзрди / Disaster Management:</strong> 1078</li>
        </ul>
        
        <div style="background-color: #fff3cd; padding: 15px; margin: 20px 0; border-left: 4px solid #ffc107;">
            <strong>тЪая╕П рдпрд╣ рдПрдХ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдЪреЗрддрд╛рд╡рдиреА рд╣реИред рдХреГрдкрдпрд╛ рддреБрд░рдВрдд рдирд┐рдХрд╛рд╕реА рдХрд░реЗрдВред</strong><br>
            <strong>тЪая╕П This is an automated emergency alert. Please evacuate immediately.</strong>
        </div>
    </div>
</body>
</html>
        """
        
        # Authority notification email
        authority_subject = f"ЁЯЪи FLOOD EVACUATION SOS - {user_name} at {user_lat:.4f}, {user_lon:.4f}"
        authority_message = f"""
<html>
<body style="font-family: Arial, sans-serif; line-height: 1.6;">
    <div style="background-color: #dc3545; color: white; padding: 20px; text-align: center;">
        <h1>ЁЯЪи FLOOD EVACUATION SOS ALERT - INDIA</h1>
    </div>
    
    <div style="padding: 20px;">
        <h2>Emergency Evacuation Alert</h2>
        
        <h3>ЁЯСд Affected Person:</h3>
        <ul>
            <li><strong>Name:</strong> {user_name}</li>
            <li><strong>Email:</strong> {user_email}</li>
            <li><strong>Phone:</strong> {user_phone}</li>
        </ul>
        
        <h3>ЁЯУН Location Details:</h3>
        <ul>
            <li><strong>Coordinates:</strong> {user_lat:.6f}, {user_lon:.6f}</li>
            <li><strong>Alert Timestamp:</strong> {timestamp}</li>
            <li><strong>Google Maps:</strong> <a href="https://maps.google.com/?q={user_lat},{user_lon}">View Location</a></li>
        </ul>
        
        <h3>ЁЯЪ╢ Evacuation Status:</h3>
        <ul>
            <li><strong>Algorithm Used:</strong> {algorithm}</li>
            <li><strong>Evacuation Time:</strong> {evacuation_time:.0f} minutes</li>
            <li><strong>Destination:</strong> {destination}</li>
            <li><strong>Status:</strong> SOS Alert Triggered</li>
        </ul>
        
        <h3>ЁЯЪи Required Actions:</h3>
        <ol>
            <li>Verify person's safety and evacuation status</li>
            <li>Dispatch emergency services if needed (NDRF/SDRF)</li>
            <li>Monitor evacuation progress</li>
            <li>Coordinate with local disaster management authorities</li>
            <li>Provide additional assistance if required</li>
        </ol>
        
        <h3>ЁЯУЮ Indian Emergency Contacts:</h3>
        <ul>
            <li><strong>Emergency Services:</strong> 112</li>
            <li><strong>Police:</strong> 100</li>
            <li><strong>Medical Emergency:</strong> 108</li>
            <li><strong>Fire Department:</strong> 101</li>
            <li><strong>Disaster Management:</strong> 1078</li>
            <li><strong>NDRF:</strong> 011-24363260</li>
        </ul>
        
        <div style="background-color: #f8d7da; padding: 15px; margin: 20px 0; border-left: 4px solid #dc3545;">
            <strong>тЪая╕П This is an automated SOS alert from the Flood Evacuation System. Immediate attention required.</strong>
        </div>
    </div>
</body>
</html>
        """
        
        # Send notifications
        if user_phone:
            results['user_sms'] = self.send_sms_via_email(user_phone, sms_message)
        
        if user_email:
            results['user_email'] = self.send_email_alert(user_email, user_email_subject, user_email_message, is_html=True)
        
        # Send to authorities
        results['authority_email'] = self.send_email_alert(
            self.alert_email, 
            authority_subject, 
            authority_message, 
            is_html=True
        )
        
        return results
    
    def send_evacuation_plan(self, user_data: Dict, evacuation_plan: Dict) -> bool:
        """Send detailed evacuation plan to user - THIS WAS MISSING!"""
        try:
            user_email = user_data.get('email', '')
            user_phone = user_data.get('phone', '')
            user_name = user_data.get('name', 'User')
            
            if not user_email and not user_phone:
                return False
            
            # Create evacuation plan message
            plan_details = evacuation_plan.get('details', 'No details available')
            route_map_url = evacuation_plan.get('map_url', '#')
            
            subject = f"ЁЯУЛ Your Flood Evacuation Plan - {user_name}"
            
            email_message = f"""
<html>
<body style="font-family: Arial, sans-serif; line-height: 1.6;">
    <div style="background-color: #007bff; color: white; padding: 20px; text-align: center;">
        <h1>ЁЯУЛ Your Personalized Evacuation Plan</h1>
    </div>
    
    <div style="padding: 20px;">
        <h2>Dear {user_name},</h2>
        
        <p>Here is your personalized flood evacuation plan:</p>
        
        <div style="background-color: #e7f3ff; padding: 15px; margin: 20px 0; border-left: 4px solid #007bff;">
            <h3>ЁЯУН Evacuation Details:</h3>
            {plan_details}
        </div>
        
        <h3>ЁЯУ▒ Keep This Information Handy:</h3>
        <ul>
            <li>Save this email for offline access</li>
            <li>Screenshot the evacuation route</li>
            <li>Share with family members</li>
            <li>Keep emergency contacts ready</li>
        </ul>
        
        <p><strong>Stay safe and be prepared!</strong></p>
    </div>
</body>
</html>
            """
            
            # Send email
            success = self.send_email_alert(user_email, subject, email_message, is_html=True)
            
            # Send SMS summary if phone available
            if user_phone and success:
                sms_summary = f"ЁЯУЛ Evacuation plan sent to your email ({user_email}). Check your inbox for detailed instructions. Stay prepared! - Flood Alert System"
                self.send_sms_via_email(user_phone, sms_summary)
            
            return success
            
        except Exception as e:
            logger.error(f"Failed to send evacuation plan: {e}")
            return False

# Initialize global notification system
notification_system = EmergencyNotificationSystem()

def send_sos_alert(user_data: Dict, evacuation_data: Dict, location_data: Dict) -> Dict:
    """Wrapper function to send SOS alert"""
    return notification_system.send_sos_alert(user_data, evacuation_data, location_data)

def send_evacuation_plan(user_data: Dict, evacuation_plan: Dict) -> bool:
    """Wrapper function to send evacuation plan"""
    return notification_system.send_evacuation_plan(user_data, evacuation_plan)
# Add this at the very end of emergency_notifications.py, after the existing wrapper functions

def test_gmail_connection():
    """Test Gmail SMTP connection"""
    try:
        import smtplib
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login('floodevacuationsystem@gmail.com', 'kdxo hvhj hmcp glio')
        server.quit()
        print("тЬЕ Gmail connection successful!")
        return True
    except Exception as e:
        print(f"тЭМ Gmail connection failed: {e}")
        return False

def debug_user_data_session():
    """Debug function to check user data in session state"""
    import streamlit as st
    
    st.write("### ЁЯФН Debug User Data")
    st.write("**Session State:**")
    user_data = {
        'name': st.session_state.get('user_name', 'NOT SET'),
        'email': st.session_state.get('user_email', 'NOT SET'),
        'phone': st.session_state.get('user_phone', 'NOT SET'),
        'username': st.session_state.get('username', 'NOT SET')
    }
    st.json(user_data)
    
    # Check if values are empty strings
    for key, value in user_data.items():
        if not value or value == 'NOT SET':
            st.error(f"тЭМ {key} is missing!")
        else:
            st.success(f"тЬЕ {key}: {value}")


# Updated Email message for user (bilingual with state-specific languages)
def get_flood_alert_email(user_name, state):
    
    STATE_LANGUAGE_MAP = {
        "Maharashtra": {
            "lang": "Marathi",
            "sms": "ЁЯЪи рдкреВрд░ рдЗрд╢рд╛рд░рд╛ FLOOD ALERT ЁЯЪи\n{name}, рдЖрдкрдг рдкреВрд░ рдХреНрд╖реЗрддреНрд░рд╛рдд рдЖрд╣рд╛рдд!\nRoute: {algorithm}\nTime: {evacuation_time} min\nрдХреГрдкрдпрд╛ рддреНрд╡рд░рд┐рдд рд╕реНрдерд▓рд╛рдВрддрд░ рдХрд░рд╛!\nEmergency: 112, 100, 108",
            "email_subject": "ЁЯЪи рддрд╛рддрдбреАрдЪреА рд╕реВрдЪрдирд╛: рдкреВрд░ рд╕реНрдерд▓рд╛рдВрддрд░ рдЖрд╡рд╢реНрдпрдХ - Flood Evacuation Required",
            "email_greeting": "рдкреНрд░рд┐рдп {name},\n\nрдЖрдкрдг рд╕рдзреНрдпрд╛ рдкреВрд░ рдХреНрд╖реЗрддреНрд░рд╛рдд рдЖрд╣рд╛рдд. рдХреГрдкрдпрд╛ рддреНрд╡рд░рд┐рдд рд╕реНрдерд▓рд╛рдВрддрд░ рдХрд░рд╛!\n\nDear {name},\nYou are currently in a flood zone and must evacuate immediately!"
        },
        "Karnataka": {
            "lang": "Kannada",
            "sms": "ЁЯЪи р▓ир│Жр▓░р│Ж р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Ж FLOOD ALERT ЁЯЪи\n{name}, р▓ир│Ар▓╡р│Б р▓ир│Жр▓░р│Ж р▓кр│Нр▓░р▓жр│Зр▓╢р▓жр▓▓р│Нр▓▓р▓┐р▓жр│Нр▓жр│Ар▓░р▓┐!\nRoute: {algorithm}\nTime: {evacuation_time} min\nр▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓др▓Хр│Нр▓╖р▓г р▓╕р│Нр▓ер▓│р▓╛р▓Вр▓др▓░р▓Чр│Кр▓│р│Нр▓│р▓┐!\nEmergency: 112, 100, 108",
            "email_subject": "ЁЯЪи р▓др│Бр▓░р│Нр▓др│Б р▓╕р│Вр▓Ър▓ир│Ж: р▓ир│Жр▓░р│Ж р▓╕р│Нр▓ер▓│р▓╛р▓Вр▓др▓░ р▓Ер▓Чр▓др│Нр▓пр▓╡р▓┐р▓жр│Ж - Flood Evacuation Required",
            "email_greeting": "р▓кр│Нр▓░р▓┐р▓п {name},\n\nр▓ир│Ар▓╡р│Б р▓Ир▓Ч р▓ир│Жр▓░р│Ж р▓кр│Нр▓░р▓жр│Зр▓╢р▓жр▓▓р│Нр▓▓р▓┐р▓жр│Нр▓жр│Ар▓░р▓┐. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓др▓Хр│Нр▓╖р▓г р▓╕р│Нр▓ер▓│р▓╛р▓Вр▓др▓░р▓Чр│Кр▓│р│Нр▓│р▓┐!\n\nDear {name},\nYou are currently in a flood zone and must evacuate immediately!"
        }
    }
    
    # Get language-specific content
    lang_config = STATE_LANGUAGE_MAP.get(state, STATE_LANGUAGE_MAP["Karnataka"])  # Default to Karnataka if state not found
    
    user_email_subject = lang_config["email_subject"]
    
    # Language-specific content based on state
    if state == "Maharashtra":
        # Marathi content
        header_local = "ЁЯЪи рдЖрдкрддреНрдХрд╛рд▓реАрди рдкреВрд░ рд╕реНрдерд▓рд╛рдВрддрд░ рдЗрд╢рд╛рд░рд╛"
        emergency_instructions_header = "ЁЯЖШ рдЖрдкрддреНрдХрд╛рд▓реАрди рд╕реВрдЪрдирд╛ / Emergency Instructions:"
        emergency_contacts_header = "ЁЯУЮ рдЖрдкрддреНрдХрд╛рд▓реАрди рд╕рдВрдкрд░реНрдХ / Emergency Contacts:"
        
        emergency_services = [
            ("рдЖрдкрддреНрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛ / Emergency Services", "112"),
            ("рдкреЛрд▓рд┐рд╕ / Police", "100"),
            ("рд╡реИрджреНрдпрдХреАрдп рдЖрдкрддреНрдХрд╛рд▓ / Medical Emergency", "108"),
            ("рдЕрдЧреНрдирд┐рд╢рдорди рд╡рд┐рднрд╛рдЧ / Fire Department", "101"),
            ("рдЖрдкрддреНрддреА рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди / Disaster Management", "1078")
        ]
        
        instructions = [
            
            "рдЕреЕрдкрдордзреНрдпреЗ рджрд╛рдЦрд╡рд▓реЗрд▓реНрдпрд╛ рд╕реНрдерд▓рд╛рдВрддрд░ рдорд╛рд░реНрдЧрд╛рдЪреЗ рддрддреНрдХрд╛рд│ рдкрд╛рд▓рди рдХрд░рд╛ / Follow the evacuation route shown in the app immediately",
            "рдлрдХреНрдд рдЖрд╡рд╢реНрдпрдХ рд╡рд╕реНрддреВ рдШреНрдпрд╛ / Take essential items only (documents, medications, water)",
            "рд╢рд╛рдВрдд рд░рд╛рд╣рд╛ рдЖрдгрд┐ рдЬрд▓рдж рдкрдг рд╕реБрд░рдХреНрд╖рд┐рддрдкрдгреЗ рдкреБрдвреЗ рдЬрд╛ / Stay calm and move quickly but safely",
            "рд╕рдорд╕реНрдпрд╛ рдЕрд╕рд▓реНрдпрд╛рд╕ 112 рд╡рд░ рдХреЙрд▓ рдХрд░рд╛ / Call 112 if you encounter any problems",
            "рдЕрдзрд┐рдХрд╛рд░реНтАНрдпрд╛рдВрдиреА рд╕реБрд░рдХреНрд╖рд┐рдд рдШреЛрд╖рд┐рдд рдХрд░реЗрдкрд░реНрдпрдВрдд рдкрд░рдд рдпреЗрдК рдирдХрд╛ / Do not return until authorities declare it safe"
        ]

        
        warning_text = "тЪая╕П рд╣реА рдПрдХ рд╕реНрд╡рдпрдВрдЪрд▓рд┐рдд рдЖрдкрддреНрдХрд╛рд▓реАрди рдЗрд╢рд╛рд░рд╛ рдЖрд╣реЗ. рдХреГрдкрдпрд╛ рддрддреНрдХрд╛рд│ рд╕реНрдерд▓рд╛рдВрддрд░ рдХрд░рд╛."
        safe_centers = "рдЦрд╛рд▓реАрд▓ рд╕реБрд░рдХреНрд╖рд┐рдд рдХреЗрдВрджреНрд░рд╛рдВрдкреИрдХреА рдХреЛрдгрддреНрдпрд╛рд╣реАрдХрдбреЗ рд╕реНрдерд▓рд╛рдВрддрд░ рдХрд░рд╛ / Evacuate to any of these safe centers:"
    else:  # Karnataka (Kannada)
        # Kannada content
        header_local = "ЁЯЪи р▓др│Бр▓░р│Нр▓др│Б р▓ир│Жр▓░р│Ж р▓╕р│Нр▓ер▓│р▓╛р▓Вр▓др▓░ р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Ж"
        emergency_instructions_header = "ЁЯЖШ р▓др│Бр▓░р│Нр▓др│Б р▓╕р│Вр▓Ър▓ир│Жр▓Чр▓│р│Б / Emergency Instructions:"
        emergency_contacts_header = "ЁЯУЮ р▓др│Бр▓░р│Нр▓др│Б р▓╕р▓Вр▓кр▓░р│Нр▓Хр▓Чр▓│р│Б / Emergency Contacts:"
        
        emergency_services = [
            ("р▓др│Бр▓░р│Нр▓др│Б р▓╕р│Зр▓╡р│Жр▓Чр▓│р│Б / Emergency Services", "112"),
            ("р▓кр│Кр▓▓р│Ар▓╕р│Н / Police", "100"),
            ("р▓╡р│Ир▓жр│Нр▓пр▓Хр│Ар▓п р▓др│Бр▓░р│Нр▓др│Б / Medical Emergency", "108"),
            ("р▓Ер▓Чр│Нр▓ир▓┐р▓╢р▓╛р▓ор▓Х р▓╡р▓┐р▓нр▓╛р▓Ч / Fire Department", "101"),
            ("р▓╡р▓┐р▓кр▓др│Нр▓др│Б р▓ир▓┐р▓░р│Нр▓╡р▓╣р▓гр│Ж / Disaster Management", "1078")
        ]
        
        instructions = [
            
            "р▓Ер▓кр│Нр▓▓р▓┐р▓Хр│Зр▓╢р▓ир│НтАМр▓ир▓▓р│Нр▓▓р▓┐ р▓др│Лр▓░р▓┐р▓╕р▓┐р▓ж р▓╕р│Нр▓ер▓│р▓╛р▓Вр▓др▓░ р▓ор▓╛р▓░р│Нр▓Чр▓╡р▓ир│Нр▓ир│Б р▓др▓Хр│Нр▓╖р▓г р▓Ер▓ир│Бр▓╕р▓░р▓┐р▓╕р▓┐ / Follow the evacuation route shown in the app immediately",
            "р▓Ер▓Чр▓др│Нр▓п р▓╡р▓╕р│Нр▓др│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓ор▓╛р▓др│Нр▓░ р▓др│Жр▓Чр│Жр▓жр│Бр▓Хр│Кр▓│р│Нр▓│р▓┐ / Take essential items only (documents, medications, water)",
            "р▓╢р▓╛р▓Вр▓др▓╡р▓╛р▓Чр▓┐р▓░р▓┐ р▓ор▓др│Нр▓др│Б р▓╡р│Зр▓Чр▓╡р▓╛р▓Чр▓┐ р▓Жр▓жр▓░р│Ж р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓┐р▓др▓╡р▓╛р▓Чр▓┐ р▓Ър▓▓р▓┐р▓╕р▓┐ / Stay calm and move quickly but safely",
            "р▓╕р▓ор▓╕р│Нр▓пр│Ж р▓Ор▓жр│Бр▓░р▓╛р▓жр▓░р│Ж 112 р▓Чр│Ж р▓Хр▓░р│Ж р▓ор▓╛р▓бр▓┐ / Call 112 if you encounter any problems",
            "р▓Ер▓зр▓┐р▓Хр▓╛р▓░р▓┐р▓Чр▓│р│Б р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓┐р▓д р▓Ор▓Вр▓жр│Б р▓Шр│Лр▓╖р▓┐р▓╕р│Бр▓╡р▓╡р▓░р│Жр▓Чр│Ж р▓╣р▓┐р▓Вр▓др▓┐р▓░р│Бр▓Чр▓мр│Зр▓бр▓┐ / Do not return until authorities declare it safe"
        ]

        
        warning_text = "тЪая╕П р▓Зр▓жр│Б р▓╕р│Нр▓╡р▓пр▓Вр▓Ър▓╛р▓▓р▓┐р▓д р▓др│Бр▓░р│Нр▓др│Б р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Жр▓пр▓╛р▓Чр▓┐р▓жр│Ж. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓др▓Хр│Нр▓╖р▓г р▓╕р│Нр▓ер▓│р▓╛р▓Вр▓др▓░р▓Чр│Кр▓│р│Нр▓│р▓┐."
        safe_centers = "р▓И р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓┐р▓д р▓Хр│Зр▓Вр▓жр│Нр▓░р▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓пр▓╛р▓╡р│Бр▓жр▓Хр│Нр▓Хр│В р▓╕р│Нр▓ер▓│р▓╛р▓Вр▓др▓░р▓Чр│Кр▓│р│Нр▓│р▓┐ / Evacuate to any of these safe centers:"
    user_email_message = f"""
<html>
<body style="font-family: Arial, sans-serif; line-height: 1.6;">
    <div style="background-color: #dc3545; color: white; padding: 20px; text-align: center;">
        <h1>{header_local}</h1>
        <h1>ЁЯЪи EMERGENCY FLOOD EVACUATION ALERT</h1>
    </div>
    
    <div style="padding: 20px;">
        <div style="background-color: #f8f9fa; padding: 15px; margin-bottom: 20px; border-left: 4px solid #dc3545;">
            {lang_config["email_greeting"].format(name=user_name)}
        </div>
        
        
        <h3>{emergency_instructions_header}</h3>
        <ol>
            {"".join(f"<li>{instruction}</li>" for instruction in instructions)}
        </ol>
        
        <h3>{emergency_contacts_header}</h3>
        <ul>
            {"".join(f"<li><strong>{service}:</strong> {number}</li>" for service, number in emergency_services)}
        </ul>
        
        <div style="background-color: #fff3cd; padding: 15px; margin: 20px 0; border-left: 4px solid #ffc107;">
            <strong>{warning_text}</strong><br>
            <strong>тЪая╕П This is an automated emergency alert. Please evacuate immediately.</strong>
        </div>
        <h1>{safe_centers}</h1>

    
    """
    
    return user_email_subject, user_email_message
STATE_SMS_MAP = {
    "Maharashtra": "ЁЯЪи рдкреВрд░ рдЗрд╢рд╛рд░рд╛! рдЦрд╛рд▓реАрд▓ рд╕реБрд░рдХреНрд╖рд┐рдд рдХреЗрдВрджреНрд░рд╛рдВрдкреИрдХреА рдХреЛрдгрддреНрдпрд╛рд╣реАрдХрдбреЗ рд╕реНрдерд▓рд╛рдВрддрд░ рдХрд░рд╛. / Flood Alert! Evacuate to any of these safe centers.",
    "Karnataka": "ЁЯЪи р▓ир│Жр▓░р│Ж р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Ж! р▓И р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓┐р▓д р▓Хр│Зр▓Вр▓жр│Нр▓░р▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓пр▓╛р▓╡р│Бр▓жр▓Хр│Нр▓Хр│В р▓╕р│Нр▓ер▓│р▓╛р▓Вр▓др▓░р▓Чр│Кр▓│р│Нр▓│р▓┐./ Flood Alert! Evacuate to any of these safe centers.",
    "Default": "ЁЯЪи Flood Alert! Evacuate to any of these safe centers."
}

def send_sms_alert_auth(user_name, user_ph, state):
    """Send a simple flood alert SMS in local language."""
    try:
        message_text = STATE_SMS_MAP.get(state, STATE_SMS_MAP["Default"])

        message = client.messages.create(
            body=message_text,
            from_=twilio_number,
            to=user_ph
        )

        print(f"тЬЕ Message sent to {user_name} ({user_ph}) with SID: {message.sid}")
        return message.sid

    except Exception as e:
        print(f"тЭМ Failed to send SMS to {user_ph}: {e}")
        return None

# Test the connection when this module is imported (optional)
if __name__ == "__main__":
    test_gmail_connection()
