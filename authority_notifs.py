import requests
from twilio.rest import Client
import smtplib
import os
from dotenv import load_dotenv
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from db_utils import get_users_collection

import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
account_sid = os.getenv("TWILIO_ACCOUNT_SID")
auth_token = os.getenv("TWILIO_AUTH_TOKEN")
api_key = os.getenv("GOOGLE_MAPS_API_KEY")
twilio_number = os.getenv("TWILIO_PHONE_NUMBER")
alert_email = os.getenv("ALERT_EMAIL")
alert_password = os.getenv("ALERT_PASSWORD")
smtp_server = os.getenv("SMTP_SERVER")
smtp_port = int(os.getenv("SMTP_PORT", 587))

# Create Twilio client
client = Client(account_sid, auth_token)

def find_nearest_safe_center_gmaps(user_address, safe_centers ):
    """
    user_address: str - Address of the user
    safe_centers: list of dicts with lat/lon
    api_key: str - Google Maps API key
    """
    # Geocode the user address
    geocode_url = f"https://maps.googleapis.com/maps/api/geocode/json?address={user_address}&key={api_key}"
    response = requests.get(geocode_url).json()

    if response["status"] != "OK" or not response["results"]:
        print("Failed to geocode user address.")
        return None

    user_location = response["results"][0]["geometry"]["location"]
    user_latlon = f"{user_location['lat']},{user_location['lng']}"
    print(user_location, user_latlon)

    # Build destinations string for all mock centers
    destinations = "|".join([f"{c['lat']},{c['lon']}" for c in safe_centers])

    # Call Distance Matrix API
    matrix_url = (
        f"https://maps.googleapis.com/maps/api/distancematrix/json?origins={user_latlon}"
        f"&destinations={destinations}&key={api_key}"
    )
    matrix_response = requests.get(matrix_url).json()

    if matrix_response["status"] != "OK":
        print("Distance Matrix API error:", matrix_response.get("error_message"))
        return None

    distances = matrix_response["rows"][0]["elements"]

    # Find the closest center
    min_dist = float("inf")
    best_center = None
    for i, element in enumerate(distances):
        if element["status"] == "OK":
            print(f"Distance to center {i}: {element['distance']['text']}")
            dist_km = element["distance"]["value"] / 1000  # meters to km
            if dist_km < min_dist:
                min_dist = dist_km
                best_center = safe_centers[i]
                best_center["distance_km"] = dist_km
                best_center["gmaps_link"] = f"https://www.google.com/maps/search/?api=1&query={best_center['lat']},{best_center['lon']}"
    print(f"Closest center: {best_center} at {min_dist:.2f} km")
    return best_center


def send_email_alert(recipient_email: str, subject: str, message: str, is_html: bool = False) -> bool:
        """Send email alert"""
        try:
            msg = MIMEMultipart('alternative')
            msg['From'] = alert_email
            msg['To'] = recipient_email
            msg['Subject'] = subject
            
            if is_html:
                msg.attach(MIMEText(message, 'html'))
            else:
                msg.attach(MIMEText(message, 'plain'))
            
            with smtplib.SMTP(smtp_server, smtp_port) as server:
                server.starttls()
                server.login(alert_email, alert_password)
                server.send_message(msg)
            
            logger.info(f"Email sent successfully to {recipient_email}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send email to {recipient_email}: {e}")
            return False
        
STATE_SMS_MAP = {
    "Maharashtra": "üö® ‡§™‡•Ç‡§∞ ‡§á‡§∂‡§æ‡§∞‡§æ! ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§® ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï: 100 (‡§™‡•ã‡§≤‡•Ä‡§∏), 108 (‡§∞‡•Å‡§ó‡•ç‡§£‡§µ‡§æ‡§π‡§ø‡§ï‡§æ), 101 (‡§Ö‡§ó‡•ç‡§®‡§ø‡§∂‡§Æ‡§®) / Flood Alert! Emergency numbers: 100 (Police), 108 (Ambulance), 101 (Fire)",
    "Karnataka": "üö® ‡≤®‡≥Ü‡≤∞‡≥Ü ‡≤é‡≤ö‡≥ç‡≤ö‡≤∞‡≤ø‡≤ï‡≥Ü! ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≥Ü‡≤ó‡≤≥‡≥Å: 100 (‡≤™‡≥ä‡≤≤‡≥Ä‡≤∏‡≥ç), 108 (‡≤Ü‡≤Ç‡≤¨‡≥ç‡≤Ø‡≥Å‡≤≤‡≥Ü‡≤®‡≥ç‡≤∏‡≥ç), 101 (‡≤Ö‡≤ó‡≥ç‡≤®‡≤ø‡≤∂‡≤æ‡≤Æ‡≤ï) / Flood Alert! Emergency numbers: 100 (Police), 108 (Ambulance), 101 (Fire)",
    "Default": "üö® Flood Alert! Emergency numbers: 100 (Police), 108 (Ambulance), 101 (Fire)"
}

def send_sms_alert_auth(user_name, user_ph, state):
    """Send a simple flood alert SMS in local language."""
    try:
        message_text = STATE_SMS_MAP.get(state, STATE_SMS_MAP["Default"])

        message = client.messages.create(
            body=message_text,
            from_=twilio_number,
            to=user_ph
        )

        print(f"‚úÖ Message sent to {user_name} ({user_ph}) with SID: {message.sid}")
        return message.sid

    except Exception as e:
        print(f"‚ùå Failed to send SMS to {user_ph}: {e}")
        return None
    
    
def get_all_users():
    users_col = get_users_collection()
    return list(users_col.find({}))

def emergency_sos(users, state):
    user_emails = []
    user_phone = []
    # Accepts users as a list of dicts (from MongoDB)
    for user_data in users:
        email = user_data.get('email')
        phone = user_data.get('phone')
        address = user_data.get('address', '')
        name = user_data.get('name', user_data.get('username', ''))
        username = user_data.get('username', '')
        if email:
            user_emails.append({
                'email': email,
                'name': name,
                'username': username,
                'address': address
            })
        if phone:
            user_phone.append({
                'phone': phone,
                'name': name,
                'username': username,
                'address': address
            })
    if state == "Maharashtra":
         instructions = [
        "‡§∂‡§æ‡§Ç‡§§ ‡§∞‡§æ‡§π‡§æ. ‡§ò‡§æ‡§¨‡§∞‡•Ç ‡§®‡§ï‡§æ. / Stay calm. Do not panic.",
        "‡§§‡§§‡•ç‡§ï‡§æ‡§≥ ‡§â‡§Ç‡§ö‡•Ä‡§µ‡§∞ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ú‡§µ‡§≥‡§ö‡•ç‡§Ø‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§æ‡§µ‡§∞ ‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§ï‡§∞‡§æ. / Move to higher ground or nearest safe center immediately."]
         user_email_message = f"""
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6;">
            <div style="background-color: #dc3545; color: white; padding: 20px; text-align: center;">
                <h1>{STATE_SMS_MAP['Maharashtra']}</h1>
                <h1>üö® EMERGENCY FLOOD EVACUATION ALERT</h1>
            </div>
            <div style="padding: 20px;">
                <ol>
                    {"".join(f"<li>{instruction}</li>" for instruction in instructions)}
                </ol>
            </div>
        </body>
        </html>
        """
         for user in user_emails:
                send_email_alert(user['email'],"üö® ‡§§‡§æ‡§§‡§°‡•Ä‡§ö‡•Ä ‡§∏‡•Ç‡§ö‡§®‡§æ: ‡§™‡•Ç‡§∞ ‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï - Flood Evacuation Required",user_email_message, is_html=True)

         for user in user_phone:
                send_sms_alert_auth(user['name'], user['phone'], state)

    elif state == "Karnataka":
         instructions = [ "‡≤∂‡≤æ‡≤Ç‡≤§‡≤µ‡≤æ‡≤ó‡≤ø‡≤∞‡≤ø. ‡≤Ü‡≤§‡≤Ç‡≤ï‡≤™‡≤°‡≤¨‡≥á‡≤°‡≤ø. / Stay calm. Do not panic.",
           "‡≤§‡≤ï‡≥ç‡≤∑‡≤£‡≤µ‡≥á ‡≤é‡≤§‡≥ç‡≤§‡≤∞‡≤¶ ‡≤≠‡≥Ç‡≤Æ‡≤ø‡≤ó‡≥Ü ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤∏‡≤Æ‡≥Ä‡≤™‡≤¶ ‡≤∏‡≥Å‡≤∞‡≤ï‡≥ç‡≤∑‡≤ø‡≤§ ‡≤ï‡≥á‡≤Ç‡≤¶‡≥ç‡≤∞‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤π‡≥ã‡≤ó‡≤ø. / Move to higher ground or nearest safe center immediately."]
         user_email_message = f"""
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6;">
            <div style="background-color: #dc3545; color: white; padding: 20px; text-align: center;">
                <h1>{STATE_SMS_MAP['Karnataka']}</h1>
                <h1>üö® EMERGENCY FLOOD EVACUATION ALERT</h1>
            </div>
            <div style="padding: 20px;">
                <ol>
                    {"".join(f"<li>{instruction}</li>" for instruction in instructions)}
                </ol>
            </div>
        </body>
        </html>
        """
         for user in user_emails:
                send_email_alert(user['email'], "üö® ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü: ‡≤®‡≥Ü‡≤∞‡≥Ü ‡≤∏‡≥ç‡≤•‡≤≥‡≤æ‡≤Ç‡≤§‡≤∞ ‡≤Ö‡≤ó‡≤§‡≥ç‡≤Ø‡≤µ‡≤ø‡≤¶‡≥Ü - Flood Evacuation Required", user_email_message, is_html=True)
         for user in user_phone:
                send_sms_alert_auth(user['name'], user['phone'], state)
                

# Updated Email message for user (bilingual with state-specific languages)
def get_flood_alert_email(user_name, state):
    
    STATE_LANGUAGE_MAP = {
        "Maharashtra": {
            "lang": "Marathi",
            "sms": "üö® ‡§™‡•Ç‡§∞ ‡§á‡§∂‡§æ‡§∞‡§æ FLOOD ALERT üö®\n{name}, ‡§Ü‡§™‡§£ ‡§™‡•Ç‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§æ‡§§ ‡§Ü‡§π‡§æ‡§§!\nRoute: {algorithm}\nTime: {evacuation_time} min\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§ï‡§∞‡§æ!\nEmergency: 112, 100, 108",
            "email_subject": "üö® ‡§§‡§æ‡§§‡§°‡•Ä‡§ö‡•Ä ‡§∏‡•Ç‡§ö‡§®‡§æ: ‡§™‡•Ç‡§∞ ‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï - Flood Evacuation Required",
            "email_greeting": "‡§™‡•ç‡§∞‡§ø‡§Ø {name},\n\n‡§Ü‡§™‡§£ ‡§∏‡§ß‡•ç‡§Ø‡§æ ‡§™‡•Ç‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§æ‡§§ ‡§Ü‡§π‡§æ‡§§. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§ï‡§∞‡§æ!\n\nDear {name},\nYou are currently in a flood zone and must evacuate immediately!"
        },
        "Karnataka": {
            "lang": "Kannada",
            "sms": "üö® ‡≤®‡≥Ü‡≤∞‡≥Ü ‡≤é‡≤ö‡≥ç‡≤ö‡≤∞‡≤ø‡≤ï‡≥Ü FLOOD ALERT üö®\n{name}, ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤®‡≥Ü‡≤∞‡≥Ü ‡≤™‡≥ç‡≤∞‡≤¶‡≥á‡≤∂‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø‡≤¶‡≥ç‡≤¶‡≥Ä‡≤∞‡≤ø!\nRoute: {algorithm}\nTime: {evacuation_time} min\n‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤§‡≤ï‡≥ç‡≤∑‡≤£ ‡≤∏‡≥ç‡≤•‡≤≥‡≤æ‡≤Ç‡≤§‡≤∞‡≤ó‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø!\nEmergency: 112, 100, 108",
            "email_subject": "üö® ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü: ‡≤®‡≥Ü‡≤∞‡≥Ü ‡≤∏‡≥ç‡≤•‡≤≥‡≤æ‡≤Ç‡≤§‡≤∞ ‡≤Ö‡≤ó‡≤§‡≥ç‡≤Ø‡≤µ‡≤ø‡≤¶‡≥Ü - Flood Evacuation Required",
            "email_greeting": "‡≤™‡≥ç‡≤∞‡≤ø‡≤Ø {name},\n\n‡≤®‡≥Ä‡≤µ‡≥Å ‡≤à‡≤ó ‡≤®‡≥Ü‡≤∞‡≥Ü ‡≤™‡≥ç‡≤∞‡≤¶‡≥á‡≤∂‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø‡≤¶‡≥ç‡≤¶‡≥Ä‡≤∞‡≤ø. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤§‡≤ï‡≥ç‡≤∑‡≤£ ‡≤∏‡≥ç‡≤•‡≤≥‡≤æ‡≤Ç‡≤§‡≤∞‡≤ó‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø!\n\nDear {name},\nYou are currently in a flood zone and must evacuate immediately!"
        }
    }
    
    # Get language-specific content
    lang_config = STATE_LANGUAGE_MAP.get(state, STATE_LANGUAGE_MAP["Karnataka"])  # Default to Karnataka if state not found
    
    user_email_subject = lang_config["email_subject"]
    
    # Language-specific content based on state
    if state == "Maharashtra":
        # Marathi content
        header_local = "üö® ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§® ‡§™‡•Ç‡§∞ ‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§á‡§∂‡§æ‡§∞‡§æ"
        emergency_instructions_header = "üÜò ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•Ç‡§ö‡§®‡§æ / Emergency Instructions:"
        emergency_contacts_header = "üìû ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï / Emergency Contacts:"
        
        emergency_services = [
            ("‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ / Emergency Services", "112"),
            ("‡§™‡•ã‡§≤‡§ø‡§∏ / Police", "100"),
            ("‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤ / Medical Emergency", "108"),
            ("‡§Ö‡§ó‡•ç‡§®‡§ø‡§∂‡§Æ‡§® ‡§µ‡§ø‡§≠‡§æ‡§ó / Fire Department", "101"),
            ("‡§Ü‡§™‡§§‡•ç‡§§‡•Ä ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§® / Disaster Management", "1078")
        ]
        
        instructions = [
            "‡§∂‡§æ‡§Ç‡§§ ‡§∞‡§æ‡§π‡§æ. ‡§ò‡§æ‡§¨‡§∞‡•Ç ‡§®‡§ï‡§æ. / Stay calm. Do not panic.",
            "‡§§‡§§‡•ç‡§ï‡§æ‡§≥ ‡§â‡§Ç‡§ö‡•Ä‡§µ‡§∞ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ú‡§µ‡§≥‡§ö‡•ç‡§Ø‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§æ‡§µ‡§∞ ‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§ï‡§∞‡§æ. / Move to higher ground or nearest safe center immediately.",
            "‡§™‡•Ç‡§∞ ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§§ ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ó‡§æ‡§°‡•Ä ‡§ö‡§æ‡§≤‡§µ‡•Ç ‡§®‡§ï‡§æ. ‡§´‡§ï‡•ç‡§§ ‡•¨ ‡§á‡§Ç‡§ö ‡§™‡§æ‡§£‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§µ‡§æ‡§π‡•Ç‡§® ‡§®‡•á‡§ä ‡§∂‡§ï‡§§‡•á. / Do not walk or drive through flood water. Just 6 inches of water can sweep you away.",
            "‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§µ‡§∏‡•ç‡§§‡•Ç ‡§∏‡•ã‡§¨‡§§ ‡§ò‡•ç‡§Ø‡§æ: ‡§ì‡§≥‡§ñ‡§™‡§§‡•ç‡§∞, ‡§î‡§∑‡§ß‡•á, ‡§™‡§æ‡§£‡•Ä, ‡§ï‡•ã‡§∞‡§°‡•á ‡§Ö‡§®‡•ç‡§®, ‡§ü‡•â‡§∞‡•ç‡§ö, ‡§´‡•ã‡§®, ‡§ö‡§æ‡§∞‡•ç‡§ú‡§∞. / Carry essentials: ID, medicines, water, dry food, flashlight, phone, charger.",
            "‡§™‡•Ç‡§∞ ‡§Ü‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§á‡§Æ‡§æ‡§∞‡§§‡•Ä‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§≤‡§ø‡§´‡•ç‡§ü/‡§è‡§≤‡•á‡§µ‡•ç‡§π‡•á‡§ü‡§∞ ‡§µ‡§æ‡§™‡§∞‡§£‡•á ‡§ü‡§æ‡§≥‡§æ. / Avoid using lifts/elevators in flooded buildings.",
            "‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§®‡§ø‡§ò‡§£‡•ç‡§Ø‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä ‡§µ‡•Ä‡§ú ‡§Ü‡§£‡§ø ‡§ó‡•Ö‡§∏ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§æ. / Turn off electricity and gas before leaving, if safe to do so.",
            "‡§∏‡•ç‡§•‡§æ‡§®‡§ø‡§ï ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•ç‚Äç‡§Ø‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§∏‡•Ç‡§ö‡§®‡§æ‡§Ç‡§ö‡•á ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡§æ. / Follow local authorities' instructions.",
            "‡§µ‡•É‡§¶‡•ç‡§ß, ‡§≤‡§π‡§æ‡§® ‡§Æ‡•Å‡§≤‡§Ç ‡§Ü‡§£‡§ø ‡§Ö‡§™‡§Ç‡§ó‡§æ‡§Ç‡§ö‡•Ä ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡§æ. / Help the elderly, children, and people with disabilities.",
            "‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§Ö‡§™‡§°‡•á‡§ü‡•ç‡§∏ ‡§∞‡•á‡§°‡§ø‡§ì, ‡§ü‡•Ä‡§µ‡•ç‡§π‡•Ä ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ñ‡§æ‡§§‡•ç‡§∞‡•Ä‡§∂‡•Ä‡§∞ ‡§µ‡•ç‡§π‡•â‡§ü‡•ç‡§∏‡§Ö‡•Ö‡§™ ‡§ö‡•Ö‡§®‡•á‡§≤‡§µ‡§∞‡•Ç‡§® ‡§ê‡§ï‡§æ. / Stay informed: Listen to official updates via radio, TV, or verified WhatsApp channels.",
            "‡§Ö‡§´‡§µ‡§æ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§Ö‡§®‡§ß‡§ø‡§ï‡•É‡§§ ‡§∏‡•ã‡§∂‡§≤ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§¨‡§æ‡§§‡§Æ‡•ç‡§Ø‡§æ ‡§ü‡§æ‡§≥‡§æ. / Avoid rumors or unverified social media news."
        ]

        
        warning_text = "‚ö†Ô∏è ‡§π‡•Ä ‡§è‡§ï ‡§∏‡•ç‡§µ‡§Ø‡§Ç‡§ö‡§≤‡§ø‡§§ ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§® ‡§á‡§∂‡§æ‡§∞‡§æ ‡§Ü‡§π‡•á. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡§§‡•ç‡§ï‡§æ‡§≥ ‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§ï‡§∞‡§æ."
        safe_centers = "‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§æ‡§Ç‡§™‡•à‡§ï‡•Ä ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ‡§π‡•Ä‡§ï‡§°‡•á ‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§ï‡§∞‡§æ / Evacuate to any of these safe centers:"
    else:  # Karnataka (Kannada)
        # Kannada content
        header_local = "üö® ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤®‡≥Ü‡≤∞‡≥Ü ‡≤∏‡≥ç‡≤•‡≤≥‡≤æ‡≤Ç‡≤§‡≤∞ ‡≤é‡≤ö‡≥ç‡≤ö‡≤∞‡≤ø‡≤ï‡≥Ü"
        emergency_instructions_header = "üÜò ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å / Emergency Instructions:"
        emergency_contacts_header = "üìû ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ó‡≤≥‡≥Å / Emergency Contacts:"
        
        emergency_services = [
            ("‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≥á‡≤µ‡≥Ü‡≤ó‡≤≥‡≥Å / Emergency Services", "112"),
            ("‡≤™‡≥ä‡≤≤‡≥Ä‡≤∏‡≥ç / Police", "100"),
            ("‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å / Medical Emergency", "108"),
            ("‡≤Ö‡≤ó‡≥ç‡≤®‡≤ø‡≤∂‡≤æ‡≤Æ‡≤ï ‡≤µ‡≤ø‡≤≠‡≤æ‡≤ó / Fire Department", "101"),
            ("‡≤µ‡≤ø‡≤™‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤£‡≥Ü / Disaster Management", "1078")
        ]
        
        instructions = [
            "‡≤∂‡≤æ‡≤Ç‡≤§‡≤µ‡≤æ‡≤ó‡≤ø‡≤∞‡≤ø. ‡≤Ü‡≤§‡≤Ç‡≤ï‡≤™‡≤°‡≤¨‡≥á‡≤°‡≤ø. / Stay calm. Do not panic.",
            "‡≤§‡≤ï‡≥ç‡≤∑‡≤£‡≤µ‡≥á ‡≤é‡≤§‡≥ç‡≤§‡≤∞‡≤¶ ‡≤≠‡≥Ç‡≤Æ‡≤ø‡≤ó‡≥Ü ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤∏‡≤Æ‡≥Ä‡≤™‡≤¶ ‡≤∏‡≥Å‡≤∞‡≤ï‡≥ç‡≤∑‡≤ø‡≤§ ‡≤ï‡≥á‡≤Ç‡≤¶‡≥ç‡≤∞‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤π‡≥ã‡≤ó‡≤ø. / Move to higher ground or nearest safe center immediately.",
            "‡≤Æ‡≤≥‡≥Ü ‡≤®‡≥Ä‡≤∞‡≤ø‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤®‡≤°‡≥Ü‡≤¶‡≥Å ‡≤π‡≥ã‡≤ó‡≤¨‡≥á‡≤°‡≤ø ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤µ‡≤æ‡≤π‡≤® ‡≤ö‡≤æ‡≤≤‡≤®‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤¨‡≥á‡≤°‡≤ø. ‡≤ï‡≥á‡≤µ‡≤≤ 6 ‡≤á‡≤Ç‡≤ö‡≥Å ‡≤®‡≥Ä‡≤∞‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≤≥‡≥ç‡≤≥‡≤ø‡≤¨‡≤ø‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å. / Do not walk or drive through flood water. Just 6 inches of water can sweep you away.",
            "‡≤Ö‡≤µ‡≤∂‡≥ç‡≤Ø‡≤ï ‡≤µ‡≤∏‡≥ç‡≤§‡≥Å‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤Ç‡≤°‡≥Å ‡≤π‡≥ã‡≤ó‡≤ø: ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≥Å ‡≤™‡≤§‡≥ç‡≤∞, ‡≤î‡≤∑‡≤ß‡≤ø, ‡≤®‡≥Ä‡≤∞‡≥Å, ‡≤í‡≤£ ‡≤Ü‡≤π‡≤æ‡≤∞, ‡≤¶‡≥Ä‡≤™, ‡≤´‡≥ã‡≤®‡≥ç, ‡≤ö‡≤æ‡≤∞‡≥ç‡≤ú‡≤∞‡≥ç. / Carry essentials: ID, medicines, water, dry food, flashlight, phone, charger.",
            "‡≤®‡≥Ä‡≤∞‡≤ø‡≤®‡≤ø‡≤Ç‡≤¶ ‡≤§‡≥Å‡≤Ç‡≤¨‡≤ø‡≤¶ ‡≤ï‡≤ü‡≥ç‡≤ü‡≤°‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤≤‡≤ø‡≤´‡≥ç‡≤ü‡≥ç/‡≤é‡≤≤‡≤ø‡≤µ‡≥á‡≤ü‡≤∞‡≥ç ‡≤¨‡≤≥‡≤ï‡≥Ü ‡≤§‡≤™‡≥ç‡≤™‡≤ø‡≤∏‡≤ø. / Avoid using lifts/elevators in flooded buildings.",
            "‡≤∏‡≥Å‡≤∞‡≤ï‡≥ç‡≤∑‡≤ø‡≤§‡≤µ‡≤ø‡≤¶‡≥ç‡≤¶‡≤∞‡≥Ü ‡≤π‡≥ä‡≤∞‡≤ü ‡≤Æ‡≥ä‡≤¶‡≤≤‡≥á ‡≤µ‡≤ø‡≤¶‡≥ç‡≤Ø‡≥Å‡≤§‡≥ç ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Ö‡≤®‡≤ø‡≤≤‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤ø‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤ø. / Turn off electricity and gas before leaving, if safe to do so.",
            "‡≤∏‡≥ç‡≤•‡≤≥‡≥Ä‡≤Ø ‡≤Ö‡≤ß‡≤ø‡≤ï‡≤æ‡≤∞‡≤ø‡≤ó‡≤≥ ‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤®‡≥Å‡≤∏‡≤∞‡≤ø‡≤∏‡≤ø. / Follow local authorities' instructions.",
            "‡≤µ‡≥É‡≤¶‡≥ç‡≤ß‡≤∞‡≥Å, ‡≤Æ‡≤ï‡≥ç‡≤ï‡≤≥ ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Ö‡≤∂‡≤ï‡≥ç‡≤§‡≤∞ ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤ø. / Help the elderly, children, and people with disabilities.",
            "‡≤∏‡≤∞‡≥ç‡≤ï‡≤æ‡≤∞‡≤ø ‡≤®‡≥ç‡≤Ø‡≥Ç‡≤∏‡≥ç‚Äå‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∞‡≥á‡≤°‡≤ø‡≤Ø‡≥ã, ‡≤ü‡≤ø‡≤µ‡≤ø ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø‡≤µ‡≤æ‡≤¶ ‡≤µ‡≤æ‡≤ü‡≥ç‡≤∏‡≥ç‚Äå‡≤Ü‡≤™‡≥ç ‡≤ö‡≤æ‡≤®‡≥Ü‡≤≤‡≥ç‚Äå‡≤ó‡≤≥‡≤ø‡≤Ç‡≤¶ ‡≤ï‡≥á‡≤≥‡≤ø. / Stay informed: Listen to official updates via radio, TV, or verified WhatsApp channels.",
            "‡≤Ö‡≤®‡≤ø‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤§ ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤Ö‡≤µ‡≤ø‡≤∂‡≥ç‡≤µ‡≤æ‡≤∏‡≤æ‡≤∞‡≥ç‡≤π ‡≤∏‡≤æ‡≤Æ‡≤æ‡≤ú‡≤ø‡≤ï ‡≤Æ‡≤æ‡≤ß‡≥ç‡≤Ø‡≤Æ ‡≤∏‡≥Å‡≤¶‡≥ç‡≤¶‡≤ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≤™‡≥ç‡≤™‡≤ø‡≤∏‡≤ø. / Avoid rumors or unverified social media news."
        ]

        
        warning_text = "‚ö†Ô∏è ‡≤á‡≤¶‡≥Å ‡≤∏‡≥ç‡≤µ‡≤Ø‡≤Ç‡≤ö‡≤æ‡≤≤‡≤ø‡≤§ ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤é‡≤ö‡≥ç‡≤ö‡≤∞‡≤ø‡≤ï‡≥Ü‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤§‡≤ï‡≥ç‡≤∑‡≤£ ‡≤∏‡≥ç‡≤•‡≤≥‡≤æ‡≤Ç‡≤§‡≤∞‡≤ó‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø."
        safe_centers = "‡≤à ‡≤∏‡≥Å‡≤∞‡≤ï‡≥ç‡≤∑‡≤ø‡≤§ ‡≤ï‡≥á‡≤Ç‡≤¶‡≥ç‡≤∞‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≤ï‡≥ç‡≤ï‡≥Ç ‡≤∏‡≥ç‡≤•‡≤≥‡≤æ‡≤Ç‡≤§‡≤∞‡≤ó‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø / Evacuate to any of these safe centers:"
    user_email_message = f"""
<html>
<body style="font-family: Arial, sans-serif; line-height: 1.6;">
    <div style="background-color: #dc3545; color: white; padding: 20px; text-align: center;">
        <h1>{header_local}</h1>
        <h1>üö® EMERGENCY FLOOD EVACUATION ALERT</h1>
    </div>
    
    <div style="padding: 20px;">
        <div style="background-color: #f8f9fa; padding: 15px; margin-bottom: 20px; border-left: 4px solid #dc3545;">
            {lang_config["email_greeting"].format(name=user_name)}
        </div>
        
        
        <h3>{emergency_instructions_header}</h3>
        <ol>
            {"".join(f"<li>{instruction}</li>" for instruction in instructions)}
        </ol>
        
        <h3>{emergency_contacts_header}</h3>
        <ul>
            {"".join(f"<li><strong>{service}:</strong> {number}</li>" for service, number in emergency_services)}
        </ul>
        
        <div style="background-color: #fff3cd; padding: 15px; margin: 20px 0; border-left: 4px solid #ffc107;">
            <strong>{warning_text}</strong><br>
            <strong>‚ö†Ô∏è This is an automated emergency alert. Please evacuate immediately.</strong>
        </div>
        <h1>{safe_centers}</h1>

    
    """
    
    return user_email_subject, user_email_message